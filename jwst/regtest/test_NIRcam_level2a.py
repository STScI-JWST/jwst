""" Test for the detector1 pipeline using NIRCam data. This should take an uncal
    file and generate the stage 1 FITS files (rate, ratints, and trapsfilled)."""
import os
from glob import glob
import pytest

from astropy.io.fits.diff import FITSDiff
from jwst.stpipe import Step

@pytest.fixture(scope="module")
def run_pipeline(jail, rtdata_module):
    """Run calwebb_detector1 pipeline on NIRCam uncalibrated data. For these data the
       rejection_threshold is increased from the default of 4 to 150 to reduce the
       runtime to a managable level."""
    rtdata = rtdata_module
    rtdata.get_data("nircam/test_detector1pipeline/jw82500001003_02101_00001_NRCALONG_uncal.fits")

    Step.from_cmdline(["jwst.pipeline.Detector1Pipeline", rtdata.input,
                       "--save_calibrated_ramp=True",
                       "--steps.group_scale.save_results=True",
                       "--steps.dq_init.save_results=True",
                       "--steps.saturation.save_results=True",
                       "--steps.ipc.save_results=True",
                       "--steps.superbias.save_results=True",
                       "--steps.refpix.save_results=True",
                       "--steps.rscd.save_results=True",
                       "--steps.firstframe.save_results=True",
                       "--steps.lastframe.save_results=True",
                       "--steps.linearity.save_results=True",
                       "--steps.dark_current.save_results=True",
                       "--steps.persistence.save_result=True",
                       "--steps.jump.save_results=True",
                       "--steps.ramp_fit.save_results=True",
                       "--steps.gain_scale.save_results=True",
                       "--steps.jump.rejection_threshold=20.0"])

    return rtdata

@pytest.mark.bigdata
def test_NIRCam_stage1_completion(run_pipeline):
    """ Check that three files are generated by the pipeline."""
    files = glob('*_rate.fits')
    files += glob('*_rateints.fits')
    files += glob('*_trapsfilled.fits')
    files += glob('*_ramp.fits')
    files += glob('*_dark_current.fits')
    files += glob('*_dq_init.fits')
    files += glob('*_gain_scale.fits')
    files += glob('*_gain_scaleints.fits')
    files += glob('*_group_scale.fits')
    files += glob('*_ipc.fits')
    files += glob('*_jump.fits')
    files += glob('*_linearity.fits')
    files += glob('*_persistence.fits')
    files += glob('*_refpix.fits')
    files += glob('*_saturation.fits')
    files += glob('*_superbias.fits')
    files += glob('*_0_ramp_fit.fits')
    files += glob('*_1_ramp_fit.fits')
    # There should be 18 outputs
    assert len(files) == 18


@pytest.mark.bigdata
@pytest.mark.parametrize("output", [
    'jw82500001003_02101_00001_NRCALONG_rate.fits',
    'jw82500001003_02101_00001_NRCALONG_rateints.fits',
    'jw82500001003_02101_00001_NRCALONG_trapsfilled.fits',
    'jw82500001003_02101_00001_NRCALONG_ramp.fits',
    'jw82500001003_02101_00001_NRCALONG_dark_current.fits',
    'jw82500001003_02101_00001_NRCALONG_dq_init.fits',
    'jw82500001003_02101_00001_NRCALONG_gain_scale.fits',
    'jw82500001003_02101_00001_NRCALONG_gain_scaleints.fits',
    'jw82500001003_02101_00001_NRCALONG_group_scale.fits',
    'jw82500001003_02101_00001_NRCALONG_ipc.fits',
    'jw82500001003_02101_00001_NRCALONG_jump.fits',
    'jw82500001003_02101_00001_NRCALONG_linearity.fits',
    'jw82500001003_02101_00001_NRCALONG_persistence.fits',
    'jw82500001003_02101_00001_NRCALONG_refpix.fits',
    'jw82500001003_02101_00001_NRCALONG_saturation.fits',
    'jw82500001003_02101_00001_NRCALONG_superbias.fits',
    'jw82500001003_02101_00001_NRCALONG_0_ramp_fit.fits',
    'jw82500001003_02101_00001_NRCALONG_1_ramp_fit.fits'],
                         ids=['rate', 'rateints','trapsfilled','ramp',
                              'dark_current','dq_init','gain_scale',
                              'gain_scaleinits','group_scale','ipc',
                              'jump','linearity','persistence','refpix',
                              'saturation','superbias','0_ramp_fit',
                              '1_ramp_fit'])
def test_NIRCam_stage1(run_pipeline, fitsdiff_default_kwargs, output):
    """
    Regression test of calwebb_detector1 pipeline performed on NIRCam data.
    """
    rtdata = run_pipeline
    rtdata.output = output
    rtdata.get_truth(os.path.join("truth/nircam/test_detector1pipeline", output))


    diff = FITSDiff(rtdata.output, rtdata.truth, **fitsdiff_default_kwargs)
    assert diff.identical, diff.report()
